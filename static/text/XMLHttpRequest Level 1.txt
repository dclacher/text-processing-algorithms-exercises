XMLHttpRequest Level 1 
 <http://www.w3.org/>

XMLHttpRequest Level 1

W3C Working Draft 30 January 2014
  This Version:
http://www.w3.org/TR/2014/WD-XMLHttpRequest-20140130/ 
<http://www.w3.org/TR/2014/WD-XMLHttpRequest-20140130/>
  Latest Version:
http://www.w3.org/TR/XMLHttpRequest/ <http://www.w3.org/TR/XMLHttpRequest/>
  Latest Editor Draft:
http://dvcs.w3.org/hg/xhr/raw-file/default/xhr-1/Overview.html 
<http://dvcs.w3.org/hg/xhr/raw-file/default/xhr-1/Overview.html>
  Previous Versions:
http://www.w3.org/TR/2012/WD-XMLHttpRequest-20121206/ 
<http://www.w3.org/TR/2012/WD-XMLHttpRequest-20121206/>
http://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/ 
<http://www.w3.org/TR/2012/WD-XMLHttpRequest-20120117/>
http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/ 
<http://www.w3.org/TR/2011/WD-XMLHttpRequest2-20110816/>
http://www.w3.org/TR/2010/WD-XMLHttpRequest2-20100907/ 
<http://www.w3.org/TR/2010/WD-XMLHttpRequest2-20100907/>
http://www.w3.org/TR/2009/WD-XMLHttpRequest2-20090820/ 
<http://www.w3.org/TR/2009/WD-XMLHttpRequest2-20090820/>
http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080930/ 
<http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080930/>
http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080225/ 
<http://www.w3.org/TR/2008/WD-XMLHttpRequest2-20080225/>
http://www.w3.org/TR/2007/WD-XMLHttpRequest-20071026/ 
<http://www.w3.org/TR/2007/WD-XMLHttpRequest-20071026/> 
http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070618/ 
<http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070618/> 
http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070227/ 
<http://www.w3.org/TR/2007/WD-XMLHttpRequest-20070227/> 
http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060927/ 
<http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060927/> 
http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060619/ 
<http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060619/> 
http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060405/ 
<http://www.w3.org/TR/2006/WD-XMLHttpRequest-20060405/> 
  Editor:
Anne van Kesteren <http://annevankesteren.nl/>, Mozilla 
<http://www.mozilla.org/> (Upstream WHATWG version) 
Julian Aubourg, Creative Area <http://www.creative-area.net/> 
송정기 (Jungkee Song) <mailto:jungkee.song@samsung.com>, Samsung Electronics 
<http://www.samsung.com/sec/> 
Hallvord R. M. Steen <http://www.hallvord.com/>, Mozilla 
<http://www.mozilla.org/> 

Copyright <http://www.w3.org/Consortium/Legal/ipr-notice#Copyright> © 2014 W3C 
<http://www.w3.org/>® (MIT <http://www.csail.mit.edu/>, ERCIM 
<http://www.ercim.eu/>, Keio <http://www.keio.ac.jp/>, Beihang 
<http://ev.buaa.edu.cn/>), All Rights Reserved. W3C liability 
<http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer>, trademark 
<http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks> and document use 
<http://www.w3.org/Consortium/Legal/copyright-documents> rules apply.

Abstract

The XMLHttpRequest specification defines an API that provides scripted client 
functionality for transferring data between a client and a server.

Status of this Document

This section describes the status of this document at the time of its 
publication. Other documents may supersede this document. A list of current W3C 
publications and the latest revision of this technical report can be found in 
theW3C technical reports index <http://www.w3.org/TR/> at http://www.w3.org/TR/.

This document is published as a snapshot of the XMLHttpRequest Living 
Specification <http://xhr.spec.whatwg.org/>.

If you wish to make comments regarding this document in a manner that is 
tracked by the W3C, please submit them via usingour public bug database 
<http://www.w3.org/Bugs/Public/enter_bug.cgi?product=WebAppsWG>, or please send 
comments topublic-webapps@w3.org 
<mailto:public-webapps@w3.org?subject=%5BXHR%5D%20> (archived 
<http://lists.w3.org/Archives/Public/public-webapps/>) with [XHR] at the start 
of the subject line.

The W3C Web Applications Working Group <http://www.w3.org/2008/webapps/> is 
the W3C working group responsible for this specification's progress along the 
W3C Recommendation track. This specification is the 30 January 2014 Working 
Draft.

Publication as a Working Draft does not imply endorsement by the W3C 
Membership. This is a draft document and may be updated, replaced or obsoleted 
by other documents at any time. It is inappropriate to cite this document as 
other than work in progress.

Work on this specification is also done at the WHATWG <http://www.whatwg.org/>
. The W3C Web Applications working group actively pursues convergence of 
XMLHttpRequest specification with the WHATWG.

This document was produced by a group operating under the 5 February 2004 W3C 
Patent Policy <http://www.w3.org/Consortium/Patent-Policy-20040205/>. W3C 
maintains apublic list of any patent disclosures 
<http://www.w3.org/2004/01/pp-impl/42538/status> made in connection with the 
deliverables of the group; that page also includes instructions for disclosing 
a patent. An individual who has actual knowledge of a patent which the 
individual believes containsEssential Claim(s) 
<http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential> must 
disclose the information in accordance withsection 6 of the W3C Patent Policy 
<http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure>.

Table of Contents

 * 1 Introduction <> 
 * 1.1 Specification history <> 
 * 2 Conformance <> 
 * 2.1 Dependencies <> 
 * 2.2 Extensibility <> 
 * 3 Terminology <> 
 * 4 Interface XMLHttpRequest <> 
 * 4.1 Task sources <> 
 * 4.2 Constructor <> 
 * 4.3 Garbage collection <> 
 * 4.4 Event handlers <> 
 * 4.5 States <> 
 * 4.6 Request <> 
 * 4.6.1 The open() method <> 
 * 4.6.2 The setRequestHeader() method <> 
 * 4.6.3 The timeout attribute <> 
 * 4.6.4 The withCredentials attribute <> 
 * 4.6.5 The upload attribute <> 
 * 4.6.6 The send() method <> 
 * 4.6.7 Infrastructure for the send() method <> 
 * 4.6.8 The abort() method <> 
 * 4.7 Response <> 
 * 4.7.1 The status attribute <> 
 * 4.7.2 The statusText attribute <> 
 * 4.7.3 The getResponseHeader() method <> 
 * 4.7.4 The getAllResponseHeaders() method <> 
 * 4.7.5 Response entity body <> 
 * 4.7.6 The overrideMimeType() method <> 
 * 4.7.7 The responseType attribute <> 
 * 4.7.8 The response attribute <> 
 * 4.7.9 The responseText attribute <> 
 * 4.7.10 The responseXML attribute <> 
 * 4.8 Events summary <> 
 * 5 Interface FormData <> 
 * References <> 
 * Acknowledgments <> 
1 Introduction

This section is non-normative.

The XMLHttpRequest <> object is an API for fetching 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> 
resources. 

The name of the object is XMLHttpRequest <> for compatibility with the Web, 
though each component of this name is potentially misleading. First, the object 
supports any text based format, including XML. Second, it can be used to make 
requests over both HTTP and HTTPS (some implementations support protocols in 
addition to HTTP and HTTPS, but that functionality is not covered by this 
specification). Finally, it supports "requests" in a broad sense of the term as 
it pertains to HTTP; namely all activity involved with HTTP requests or 
responses for the defined HTTP methods.

Some simple code to do something with data from an XML document fetched over 
the network:
function processData(data) { // taking care of data } function handler() { 
if(this.readyState == this.DONE) { if(this.status == 200 && this.responseXML != 
null && this.responseXML.getElementById('test').textContent) { // success! 
processData(this.responseXML.getElementById('test').textContent); return; } // 
something went wrong processData(null); } } var client = new XMLHttpRequest(); 
client.onreadystatechange = handler; client.open("GET", "unicorn.xml"); 
client.send(); 
If you just want to log a message to the server:
function log(message) { var client = new XMLHttpRequest(); client.open("POST", 
"/log"); client.setRequestHeader("Content-Type", "text/plain;charset=UTF-8"); 
client.send(message); } 
Or if you want to check the status of a document on the server:
function fetchStatus(address) { var client = new XMLHttpRequest(); 
client.onreadystatechange = function() { // in case of network errors this 
might not give reliable results if(this.readyState == this.DONE) 
returnStatus(this.status); } client.open("HEAD", address); client.send(); } 
1.1 Specification history

The XMLHttpRequest <> object was initially defined as part of the WHATWG's 
HTML effort. (Long after Microsoft shipped an implementation.) It moved to the 
W3C in 2006. Extensions (e.g. progress events and cross-origin requests) to
XMLHttpRequest <> were developed in a separate draft (XMLHttpRequest Level 2) 
until end of 2011, at which point the two drafts were merged andXMLHttpRequest 
<> became a single entity again from a standards perspective. Since 2012, the 
development work required for getting the spec finalized has taken place both 
in the WHATWG and in the W3C Web Applications working group.

XMLHttpRequest Level 1, the first stable Recommendation track specification 
for theXMLHttpRequest <> feature, standardizes all parts of XMLHttpRequest <> 
that are compatibly supported across major implementations. Implementors should 
be able to rely on this specification and therelated test suite 
<http://w3c-test.org/web-platform-tests/master/XMLHttpRequest/> in order to 
create interoperable implementations.

Some features included in the WHATWG specification 
<http://xhr.spec.whatwg.org/> are left out because they are not yet widely 
implemented or used. These features are:

 * Fetching 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> data: 
URLs 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#data-protocol>
. 
 * The URLSearchParams type in send() method. 
 * The additional methods other than append() defined in the interface FormData
 <>. 
Historical discussion can be found in the following mailing list archives: 

 * whatwg@whatwg.org <http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/> 
 * public-webapi@w3.org <http://lists.w3.org/Archives/Public/public-webapi/> 
 * public-appformats@w3.org 
<http://lists.w3.org/Archives/Public/public-appformats/> 
 * public-webapps@w3.org <http://lists.w3.org/Archives/Public/public-webapps/> 
2 Conformance

All diagrams, examples, and notes in this specification are non-normative, as 
are all sections explicitly marked non-normative. Everything else in this 
specification is normative.

The key words "MUST", "MUST NOT", "REQUIRED",  "SHOULD", "SHOULD NOT", 
"RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this 
specification are to be interpreted as described in RFC2119. For readability, 
these words do not appear in all uppercase letters in this specification.
[RFC2119] <> 

2.1 Dependencies

This specification relies on several underlying specifications.
  Cross-Origin Resource Sharing

A conforming user agent must support the algorithms of the Cross-Origin 
Resource Sharing specification.[CORS] <>

  DOM4

A conforming user agent must support at least the subset of the functionality 
defined in DOM4 that this specification relies upon, such as various exceptions 
andEventTarget <http://dev.w3.org/2006/webapi/DOM4Core/#eventtarget>. [DOM] <>

  DOM Parsing and Serialization 

A conforming user agent must support at least the serialize 
<http://html5.org/specs/dom-parsing.html#concept-serialize> concept from DOM 
Parsing and Serialization.[DOMPS] <> 

  Encoding Standard 

A conforming user agent must support at least the subset of the functionality 
defined in Encoding Standard that this specification relies upon, such as the
utf-8 <http://encoding.spec.whatwg.org/#utf-8> encoding 
<http://encoding.spec.whatwg.org/#encoding>. [ENCODING] <> 

  File API

A conforming user agent must support at least the subset of the functionality 
defined in File API that this specification relies upon, such as theBlob 
<http://dev.w3.org/2006/webapi/FileAPI/#blob> and File 
<http://dev.w3.org/2006/webapi/FileAPI/#file> interfaces. [FILEAPI] <>

  HTML

A conforming user agent must support at least the subset of the functionality 
defined in HTML that this specification relies upon, such as the basics of the
Window <http://www.w3.org/html/wg/drafts/html/master/browsers.html#window> 
object and serializing aDocument 
<http://dev.w3.org/2006/webapi/DOM4Core/#document> object. [HTML] <> 

  HTTP

A conforming user agent must support some version of the HTTP protocol. 
Requirements regarding HTTP are made throughout the specification.[HTTP] <> 

  Progress Events

A conforming user agent must support the Progress Events specification. 
[PROGRESSEVENTS] <> 

  Typed Array

A conforming user agent must support the ArrayBuffer 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFER> and 
ArrayBufferView 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFERVIEW> 
objects.[TYPEDARRAY] <> 

  URL

A conforming user agent must support the URL parsing algorithm of the URL 
specification.[URL] <>

  Web IDL

A conforming user agent must also be a conforming implementation of the IDL 
fragments in this specification, as described in the Web IDL specification.
[WEBIDL] <> 

  XML

A conforming user agent must be a conforming XML processor that reports 
violations of namespace well-formedness.[XML] <> [XMLNS] <> 


It uses the typographic conventions from HTML. [HTML] <>

2.2 Extensibility

User agents, Working Groups, and other interested parties are strongly 
encouraged to discuss new features on a relevant public forum, preferably 
public-webapps@w3.org <mailto:public-webapps@w3.org>. If this is for some 
reason not possible prefix the extension in some way. E.g. if company Foo wants 
to add a proprietary methodbar() it could be named fooBar() to prevent clashes 
with a potential non-proprietary methodbar().

3 Terminology

The term user credentials for the purposes of this specification means 
cookies, HTTP authentication, and client-side SSL certificates. Specifically it 
does not refer to proxy authentication or theOrigin header. [COOKIES] <> 

4 Interface XMLHttpRequest
[NoInterfaceObject] interface XMLHttpRequestEventTarget : EventTarget 
<http://dev.w3.org/2006/webapi/DOM4Core/#eventtarget> { // event handlers <> 
attributeEventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onloadstart <>; attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onprogress <>; attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onabort <>; attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onerror <>; attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onload <>; attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
ontimeout <>; attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onloadend <>; }; interface XMLHttpRequestUpload : XMLHttpRequestEventTarget <> 
{ }; enumXMLHttpRequestResponseType { "", "arraybuffer", "blob", "document", 
"json", "text" }; [Constructor <>] interface XMLHttpRequest : 
XMLHttpRequestEventTarget <> { // event handler <> attribute EventHandler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#eventhandler> 
onreadystatechange <>; // states <> const unsigned short UNSENT <> = 0; const 
unsigned shortOPENED <> = 1; const unsigned short HEADERS_RECEIVED <> = 2; 
const unsigned shortLOADING <> = 3; const unsigned short DONE <> = 4; readonly 
attribute unsigned shortreadyState <>; // request <> void open <>(ByteString 
method, [EnsureUTF16] DOMString url); void open <>(ByteString method, 
[EnsureUTF16] DOMStringurl, boolean async, optional [EnsureUTF16] DOMString? 
username = null, optional [EnsureUTF16] DOMString? password = null); void 
setRequestHeader <>(ByteString header, ByteString value); attribute unsigned 
longtimeout <>; attribute boolean withCredentials <>; readonly attribute 
XMLHttpRequestUpload <> upload <>; void send <>(optional (ArrayBufferView 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFERVIEW> or 
Blob <http://dev.w3.org/2006/webapi/FileAPI/#blob> or Document 
<http://dev.w3.org/2006/webapi/DOM4Core/#document> or [EnsureUTF16] DOMString or
FormData <>)? data = null); void abort <>(); // response <> readonly attribute 
unsigned shortstatus <>; readonly attribute ByteString statusText <>; 
ByteString?getResponseHeader <>(ByteString header); ByteString 
getAllResponseHeaders <>(); void overrideMimeType <>(DOMString mime); attribute 
XMLHttpRequestResponseType <> responseType <>; readonly attribute any response 
<>; readonly attribute DOMString responseText <>; readonly attribute Document 
<http://dev.w3.org/2006/webapi/DOM4Core/#document>? responseXML <>; }; 
Each XMLHttpRequest <> object has a unique, associated XMLHttpRequestUpload <> 
object.

If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is aworker environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#worker-environment>
, implementations must act as ifDocument and Document? in the above IDL were 
not exposed. I.e.send() <> is not overloaded with it and responseXML <> always 
returns null (as required by its definition, too).

4.1 Task sources

Each XMLHttpRequest <> object has its own task source 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#task-source>. 
Namely, theXMLHttpRequest task source. 

4.2 Constructor

The XMLHttpRequest <> object has an associated settings object. 
  client = new XMLHttpRequest <>() 
Returns a new XMLHttpRequest <> object. 

The XMLHttpRequest() constructor must run these steps: 

 * 
Let xhr be a new XMLHttpRequest <> object. 

 * 
Set xhr's settings object <> to the relevant settings object 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#relevant-settings-object-for-a-global-object>
 for the global object ofxhr's interface object. 

 * 
Return xhr. 

4.3 Garbage collection

An XMLHttpRequest <> object must not be garbage collected if its state is 
OPENED <> and the send() flag <> is set, its state is HEADERS_RECEIVED <>, or 
its state isLOADING <>, and one of the following is true: 

 * 
It has one or more event listeners 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-listener> registered 
whosetype is readystatechange <>, progress <>, abort <>, error <>, load <>, 
timeout <>, or loadend <>. 

 * 
The upload complete flag <> is unset and the associated XMLHttpRequestUpload <>
 object has one or moreevent listeners 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-listener> registered 
whosetype is progress <>, abort <>, error <>, load <>, timeout <>, or loadend <>
.

If an XMLHttpRequest <> object is garbage collected while its connection is 
still open, the user agent mustterminate the request <>.

4.4 Event handlers

The following are the event handlers 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handlers> 
(and their correspondingevent handler event types 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handler-event-type>
) that must be supported on objects implementing an interface that inherits from
XMLHttpRequestEventTarget <> as attributes:

event handler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handlers> 
event handler event type 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handler-event-type>
onloadstart loadstart <> 
onprogress progress <> 
onabort abort <> 
onerror error <> 
onload load <> 
ontimeout timeout <> 
onloadend loadend <> 
The following is the event handler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handlers> 
(and its correspondingevent handler event type 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handler-event-type>
) that must be supported as attribute solely by theXMLHttpRequest <> object:

event handler 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handlers> 
event handler event type 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#event-handler-event-type>
onreadystatechange readystatechange <> 
4.5 States
  client . readyState <> 

Returns the current state. 


The XMLHttpRequest <> object can be in several states. The readyState 
attribute must return the current state, which must be one of the following 
values:
  UNSENT (numeric value 0)

The object has been constructed.

  OPENED (numeric value 1)

The open() <> method has been successfully invoked. During this state request 
headers can be set usingsetRequestHeader() <> and the request can be made using 
thesend() <> method.

  HEADERS_RECEIVED (numeric value 2)

All redirects (if any) have been followed and all HTTP headers of the final 
response have been received. Several response members of the object are now 
available.

  LOADING (numeric value 3)

The response entity body <> is being received.

  DONE (numeric value 4)

The data transfer has been completed or something went wrong during the 
transfer (e.g. infinite redirects).


The send() flag indicates that the send() <> method has been invoked. It is 
initially unset and is used during theOPENED <> state. 

The error flag indicates some type of network error or fetch termination. It 
is initially unset.

4.6 Request

Each XMLHttpRequest <> object has the following request-associated concepts: 
request method, request URL, author request headers, request entity body, 
source origin, referrer source, synchronous flag, upload complete flag, and 
upload events flag. 

The author request headers <> is a list of HTTP header names and corresponding 
header values. Comparisons against the HTTP header names must be done in a 
case-insensitive manner. Initially it must be empty.

The request entity body <> must initially be null. 

The synchronous flag <>, upload complete flag <>, and upload events flag <> 
must be initially unset.

To terminate the request run these steps: 

 * 
Set the error flag <>. 

 * 
Cancel any instance of the fetch 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> 
algorithm opened by this object.

 * 
If there are any tasks 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#concept-task> 
from the object'sXMLHttpRequest task source <> in one of the task queues 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#task-queue>, then 
remove them.

4.6.1 The open() method
  client . open <>(method, url [, async = true [, username = null [, password 
= null]]]) 

Sets the request method <>, request URL <>, and synchronous flag <>.

Throws a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception> if either 
method is not a valid HTTP method or url cannot be parsed. 

Throws a "SecurityError <http://dev.w3.org/2006/webapi/DOM4Core/#securityerror>
" exception ifmethod is a case-insensitive match for CONNECT, TRACE or TRACK.

Throws an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception if async
 is false, theJavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
, and either thetimeout <> attribute is not zero, the withCredentials <> 
attribute is true, or theresponseType <> attribute is not the empty string. 


The open(method, url, async, username, password) method must run these steps: 

 * 
If settings object <>'s responsible document 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#responsible-document>
 is notfully active 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#fully-active>, throw
 <http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
Set base to settings object <>'s API base URL 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#api-base-url>. 

 * 
Set source origin <> to settings object <>'s origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#origin>. 

 * 
Set referrer source <> to the settings object <>'s API referrer source 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#api-referrer-source>
'sURL <http://dev.w3.org/2006/webapi/DOM4Core/#concept-document-url> if 
settings object <>'s API referrer source 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#api-referrer-source>
 is adocument <http://dev.w3.org/2006/webapi/DOM4Core/#concept-document>, and 
settings object <>'s API referrer source 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#api-referrer-source>
 otherwise.

 * 
If method does not match the Method 
<http://tools.ietf.org/html/rfc2616/#section-5.1.1> token production, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception>. 

 * 
If method is a case-insensitive match for CONNECT, DELETE, GET, HEAD, OPTIONS, 
POST, PUT, TRACE, or TRACK, subtract 0x20 from each byte in the range 0x61 
(ASCII a) to 0x7A (ASCII z).

If it does not match any of the above, it is passed through literally, 
including in the final request. 

 * 
If method is a case-sensitive match for CONNECT, TRACE, or TRACK, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> a "SecurityError 
<http://dev.w3.org/2006/webapi/DOM4Core/#securityerror>" exception. 

Allowing these methods would pose a security risk. [HTTPVERBSEC] <> 

 * 
Let parsed URL be the result of parsing 
<http://url.spec.whatwg.org/#concept-url-parser> url with base. 

 * 
If parsed URL is failure, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception>. 

 * 
If the async argument is omitted, set async to true, and set username and 
password to null. 

Due to unfortunate legacy constraints, passing undefined for the async 
argument is treated differently fromasync being omitted. 

 * 
If parsed URL's relative flag <http://url.spec.whatwg.org/#relative-flag> is 
set, run these substeps:

 * 
If the username argument is not null, set parsed URL's username 
<http://url.spec.whatwg.org/#concept-url-username> to username. 

 * 
If the password argument is not null, set parsed URL's password 
<http://url.spec.whatwg.org/#concept-url-password> to password. 

 * 
If async is false, the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
, and either thetimeout <> attribute value is not zero, the withCredentials <> 
attribute value is true, or theresponseType <> attribute value is not the empty 
string,throw <http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "
InvalidAccessError <http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>
" exception.

 * 
Terminate the request <>. 

After all, a request can be ongoing at this point. 

 * 
Set variables associated with the object as follows:

 * 
Set request method <> to method. 

 * 
Set request URL <> to parsed URL. 

 * 
If async is false, set the synchronous flag <>. 

 * 
Set author request headers <> to the empty list. 

 * 
Unset the send() flag <>. 

 * 
Set response entity body <> to null. 

 * 
Set arraybuffer response entity body <> to null. 

 * 
Set blob response entity body <> to null. 

 * 
Set document response entity body <> to null. 

 * 
Set JSON response entity body <> to null. 

 * 
Set text response entity body <> to null. 

 * 
If the state is not OPENED <>, run these substeps: 

 * 
Change the state to OPENED <>. 

 * 
Fire an event <http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-fire> 
namedreadystatechange <>. 

4.6.2 The setRequestHeader() method
  client . setRequestHeader <>(header, value) 

Appends an header to the list of author request headers <>, or if header is 
already in the list ofauthor request headers <>, combines its value with value.

Throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if the 
state is notOPENED <> or if the send() flag <> is set.

Throws a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception> if header is 
not a valid HTTP header field name or ifvalue is not a valid HTTP header field 
value.


As indicated in the algorithm below certain headers cannot be set and are left 
up to the user agent. In addition there are certain other headers the user 
agent will take control of if they are not set by the author as indicated at 
the end of thesend() <> method section.

For non same origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#same-origin> 
requests using the HTTPGET method a preflight request is made when headers 
other thanAccept and Accept-Language are set.

The setRequestHeader(header, value) method must run these steps:

 * 
If the state is not OPENED <>, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the send() flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If header does not match the field-name 
<http://tools.ietf.org/html/rfc2616/#section-4.2> production, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception>. 

 * 
If value does not match the field-value 
<http://tools.ietf.org/html/rfc2616/#section-4.2> production, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception>. 

An empty string represents an empty header field value. 

 * 
Terminate these steps if header is a case-insensitive match for one of the 
following headers:

 * Accept-Charset 
 * Accept-Encoding 
 * Access-Control-Request-Headers 
 * Access-Control-Request-Method 
 * Connection 
 * Content-Length 
 * Cookie 
 * Cookie2 
 * Date 
 * DNT 
 * Expect 
 * Host 
 * Keep-Alive 
 * Origin 
 * Referer 
 * TE 
 * Trailer 
 * Transfer-Encoding 
 * Upgrade 
 * User-Agent 
 * Via 
… or if the start of header is a case-insensitive match for Proxy- or Sec- 
(including whenheader is just Proxy- or Sec-).

The above headers are controlled by the user agent to let it control those 
aspects of transport. This guarantees data integrity to some extent. Header 
names starting withSec- are not allowed to be set to allow new headers to be 
minted that are guaranteed not to come fromXMLHttpRequest <>.

 * 
If header is not in the author request headers <> list, append header with its 
associatedvalue to the list and terminate these steps.

 * 
If header is in the author request headers <> list, append ",", followed by 
U+0020, followed byvalue, to the value of the header matching header. 

The XMLHttpRequest standard intentionally constraints the use of HTTP here in 
line with contemporary implementations.

Some simple code demonstrating what happens when setting the same header twice:
// The following script: var client = new XMLHttpRequest(); client.open('GET', 
'demo.cgi'); client.setRequestHeader('X-Test', 'one'); 
client.setRequestHeader('X-Test', 'two'); client.send(); // …results in the 
following header being sent: X-Test: one, two 
4.6.3 The timeout attribute
  client . timeout <> 

Can be set to a time in milliseconds. When set to a non-zero value will cause 
fetching 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> to 
terminate after the given time has passed. When the time has passed, the 
request has not yet completed, and thesynchronous flag <> is unset, a timeout <>
 event will then bedispatched 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-dispatch>, or a "
TimeoutError <http://dev.w3.org/2006/webapi/DOM4Core/#timeouterror>" exception 
will bethrown <http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> otherwise 
(for thesend() <> method). 

When set: throws an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception if the 
synchronous flag <> is set and the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
.


The timeout attribute must return its value. Initially its value must be zero.

Setting the timeout <> attribute must run these steps: 

 * 
If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
 and thesynchronous flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception. 

 * 
Set its value to the new value. 

This implies that the timeout <> attribute can be set while fetching 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> is in 
progress. If that occurs it will still be measured relative to the start of
fetching 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch>. 

4.6.4 The withCredentials attribute
  client . withCredentials <> 

True when user credentials <> are to be included in a cross-origin request. 
False when they are to be excluded in a cross-origin request and when cookies 
are to be ignored in its response. Initially false.

When set: throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if the 
state is notUNSENT <> or OPENED <>, or if the send() flag <> is set.

When set: throws an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception if the 
synchronous flag <> is set and the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
.


The withCredentials attribute must return its value. Initially its value must 
be false.

Setting the withCredentials <> attribute must run these steps:

 * 
If the state is not UNSENT <> or OPENED <>, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the send() flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
 and thesynchronous flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception. 

 * 
Set the withCredentials <> attribute's value to the given value.

The withCredentials <> attribute has no effect when fetching 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> 
same-origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#same-origin> 
resources.

4.6.5 The upload attribute
  client . upload <> 

Returns the associated XMLHttpRequestUpload <> object. It can be used to 
gather transmission information when data is transferred to a server.


The upload attribute must return the associated XMLHttpRequestUpload <> object.

As indicated earlier, each XMLHttpRequest <> object has an associated 
XMLHttpRequestUpload <> object. 

4.6.6 The send() method
  client . send <>([data = null]) 

Initiates the request. The optional argument provides the request entity body 
<>. The argument is ignored if request method <> is GET or HEAD.

Throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if the 
state is notOPENED <> or if the send() flag <> is set.


The send(data) method must run these steps: 

 * 
If the state is not OPENED <>, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the send() flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the request method <> is GET or HEAD, set data to null. 

 * 
If data is null, do not include a request entity body <> and go to the next 
step.

Otherwise, let encoding be null, mime type be null, and then follow these 
rules, depending ondata: 
  ArrayBufferView 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFERVIEW> 

Let the request entity body <> be the raw data represented by data.

  Blob <http://dev.w3.org/2006/webapi/FileAPI/#blob> 

If the object's type <http://dev.w3.org/2006/webapi/FileAPI/#dfn-type> 
attribute is not the empty string letmime type be its value.

Let the request entity body <> be the raw data represented by data.

  document <http://dev.w3.org/2006/webapi/DOM4Core/#concept-document> 

Let encoding be "UTF-8". 

If data is an HTML document 
<http://dev.w3.org/2006/webapi/DOM4Core/#html-document>, let mime type be "
text/html", or let mime type be "application/xml" otherwise. Then append "
;charset=UTF-8" to mime type. 

Let the request entity body <> be data, serialized 
<http://html5.org/specs/dom-parsing.html#concept-serialize>, converted to 
Unicode <http://dev.w3.org/2006/webapi/WebIDL/#dfn-obtain-unicode>, and utf-8 
encoded <http://encoding.spec.whatwg.org/#utf-8-encode>. Re-throw any exception 
serializing <http://html5.org/specs/dom-parsing.html#concept-serialize> throws. 

If data cannot be serialized 
<http://html5.org/specs/dom-parsing.html#concept-serialize>, an "
InvalidStateError <http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" 
exception is thrown.

  a string 

Let encoding be "UTF-8". 

Let mime type be "text/plain;charset=UTF-8".

Let the request entity body <> be data, utf-8 encoded 
<http://encoding.spec.whatwg.org/#utf-8-encode>. 

  FormData <> 

Let the request entity body <> be the result of running the multipart/form-data
 encoding algorithm 
<http://www.w3.org/html/wg/drafts/html/master/forms.html#multipart/form-data-encoding-algorithm>
 withdata as form data set and with utf-8 
<http://encoding.spec.whatwg.org/#utf-8> as the explicit character encoding. 

Let mime type be the concatenation of "multipart/form-data;", a U+0020 SPACE 
character, "boundary=", and the multipart/form-data boundary string 
<http://www.w3.org/html/wg/drafts/html/master/forms.html#multipart/form-data-boundary-string>
 generated by themultipart/form-data encoding algorithm 
<http://www.w3.org/html/wg/drafts/html/master/forms.html#multipart/form-data-encoding-algorithm>
.


If a Content-Type header is in author request headers <> and its value is a 
valid MIME type 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#valid-mime-type>
 that has acharset parameter whose value is not a case-insensitive match for 
encoding, and encoding is not null, set all the charset parameters of that 
Content-Type header to encoding. 

If no Content-Type header is in author request headers <> and mime type is not 
null, append aContent-Type header with value mime type to author request headers
 <>. 

 * 
If the synchronous flag <> is set, release the storage mutex 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#storage-mutex>.

 * 
Unset the error flag <>, upload complete flag <> and upload events flag <>. 

 * 
If there is no request entity body <> or if it is empty, set the upload 
complete flag <>. 

 * 
If the synchronous flag <> is unset and one or more event listeners are 
registered on theXMLHttpRequestUpload <> object, set the upload events flag <>. 

 * 
If the synchronous flag <> is unset, run these substeps:

 * 
Set the send() flag <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadstart <>.

 * 
If the upload complete flag <> is unset, fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadstart <> on the XMLHttpRequestUpload <> object.

 * 
Return the send() <> method call, but continue running the steps in this 
algorithm.

 *   If the source origin <> and the request URL <> are same origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#same-origin>

These are the same-origin request steps.

Fetch <http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#fetch> 
therequest URL <> from origin source origin <>, using referrer source <> as 
override referrer source, with the synchronous flag set if the synchronous flag 
<> is set, using HTTP method request method <>, taking into account the request 
entity body <>, list of author request headers <>, and the rules listed at the 
end of this section.
  If the synchronous flag <> is set

While making the request also follow the same-origin request event rules <>.

The send() <> method call will now be returned by virtue of this algorithm 
ending.

  If the synchronous flag <> is unset

Make upload progress notifications <>.

Make progress notifications <>.

While processing the request, as data becomes available and when the user 
interferes with the request,queue tasks 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#queue-a-task> to 
update theresponse entity body <> and follow the same-origin request event rules
 <>.


  Otherwise

These are the cross-origin request steps.

Make a cross-origin request <http://www.w3.org/TR/cors/#cross-origin-request>, 
passing these as parameters:
  request URL
The request URL <>.
  request method
The request method <>.
  author request headers
The list of author request headers <>.
  request entity body
The request entity body <>.
  source origin
The source origin <>.
  referrer source 
The referrer source <>. 
  omit credentials flag
Set if withCredentials <> attribute's value is false. 
  force preflight flag
Set if the upload events flag <> is set. 
  If the synchronous flag <> is set

While making the request also follow the cross-origin request event rules <>.

The send() <> method call will now be returned by virtue of this algorithm 
ending.

  If the synchronous flag <> is unset

While processing the request, as data becomes available and when the end user 
interferes with the request,queue tasks to update the response entity body <> 
and follow thecross-origin request event rules <>.



If the user agent allows the end user to configure a proxy it should modify 
the request appropriately; i.e., connect to the proxy host instead of the 
origin server, modify theRequest-Line and send Proxy-Authorization headers as 
specified.

If the user agent supports HTTP Authentication and Authorization is not in the 
list ofauthor request headers <>, it should consider requests originating from 
theXMLHttpRequest <> object to be part of the protection space that includes 
the accessed URIs and sendAuthorization headers and handle 401 Unauthorized 
requests appropriately.

If authentication fails, source origin <> and the request URL <> are same 
origin <http://www.w3.org/html/wg/drafts/html/master/browsers.html#same-origin>,
Authorization is not in the list of author request headers <>, request URL <>'s 
username <http://url.spec.whatwg.org/#concept-url-username> is the empty string 
andrequest URL <>'s password <http://url.spec.whatwg.org/#concept-url-password> 
is null, user agents should prompt the end user for their username and password.

Otherwise, if authentication fails, user agents must not prompt the end user 
for their username and password.[HTTPAUTH] <> 

Unfortunately end users are prompted because of legacy content constraints. 
However, when possible this behavior is prohibited, as it is bad UI. E.g. that 
is why thesame origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#same-origin> 
restriction is made above.

If the user agent supports HTTP State Management it should persist, discard 
and send cookies (as received in theSet-Cookie response header, and sent in the 
Cookie header) as applicable. [COOKIES] <> 

If the user agent implements a HTTP cache it should respect Cache-Control 
headers inauthor request headers <> (e.g. Cache-Control: no-cache bypasses the 
cache). It must not sendCache-Control or Pragma request headers automatically 
unless the end user explicitly requests such behavior (e.g. by reloading the 
page).

For 304 Not Modified responses that are a result of a user agent generated 
conditional request the user agent must act as if the server gave a200 OK 
response with the appropriate content. The user agent must allowauthor request 
headers <> to override automatic cache validation (e.g. If-None-Match or 
If-Modified-Since), in which case 304 Not Modified responses must be passed 
through.[HTTP] <> 

If the user agent implements server-driven content-negotiation it must follow 
these constraints for theAccept and Accept-Language request headers:

 * 
Both headers must not be modified if they are in author request headers <>. 

 * 
If not in author request headers <>, Accept-Language with an appropriate value 
should be appended to it.

 * 
If not in author request headers <>, Accept with value */* must be appended to 
it.

Responses must have the content-encodings automatically decoded. [HTTP] <> 

Besides the author request headers <>, user agents should not include 
additional request headers other than those mentioned above or other than those 
authors are not allowed to set usingsetRequestHeader() <>. This ensures that 
authors have a predictable API.

4.6.7 Infrastructure for the send() method

The same-origin request event rules are as follows:
  If the error flag <> is set 

Terminate these steps. 

  If the response has an HTTP status code of 301, 302, 303, 307, or 308

If the redirect violates infinite loop precautions this is a network error <>.

Otherwise, run these steps:

 * 
Set the request URL <> to the URL <http://url.spec.whatwg.org/#url> conveyed 
by theLocation header.

 * 
If the source origin <> and the origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#origin> of request 
URL <> are same origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#same-origin> 
transparently follow the redirect while observing thesame-origin request event 
rules <>. 

 * 
Otherwise, follow the cross-origin request steps <> and terminate the steps 
for this algorithm.

HTTP places requirements on the user agent regarding the preservation of the 
request method <> and request entity body <> during redirects, and also 
requires end users to be notified of certain kinds of automatic redirections.

  If the end user cancels the request

This is an abort error <>.

  If there is a network error

In case of DNS errors, TLS negotiation failure, or other type of network 
errors, this is anetwork error <>. Do not request any kind of end user 
interaction.

This does not include HTTP responses that indicate some type of error, such as 
HTTP status code 410.

  If timeout <> is not 0 and since the request started the amount of 
milliseconds specified bytimeout <> has passed

This is a timeout error <>.

  Once all HTTP headers have been received, the synchronous flag <> is unset, 
and the HTTP status code of the response is not one of 301, 302, 303, 307, and 
308

Switch to the HEADERS_RECEIVED state <>.

  Once the first byte (or more) of the response entity body <> has been 
received and thesynchronous flag <> is unset
  If there is no response entity body <> and the synchronous flag <> is unset

Switch to the LOADING state <>.

  Once the whole response entity body <> has been received
  If there is no response entity body <> and the state is LOADING <>
  If there is no response entity body <> and the synchronous flag <> is set

Switch to the DONE state <>.


The cross-origin request event rules are as follows:
  If the error flag <> is set 

Terminate these steps. 

  If the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is preflight complete 
and thesynchronous flag <> is unset

Make upload progress notifications <>.

  If the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is network error

This is a network error <>.

  If the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is abort error

This is an abort error <>.

  If timeout <> is not 0 and since the request started the amount of 
milliseconds specified bytimeout <> has passed

This is a timeout error <>.

  Once all HTTP headers have been received, the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is success, and the 
synchronous flag <> is unset

Switch to the HEADERS_RECEIVED state <>.

Make progress notifications <>.

  Once the first byte (or more) of the response entity body <> has been 
received, thecross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is success, and the 
synchronous flag <> is unset
  If there is no response entity body <>, the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is success, and the 
synchronous flag <> is unset

Switch to the LOADING state <>.

  Once the whole response entity body <> has been received and the 
cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is success
  If there is no response entity body <>, the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is success, and the 
state isLOADING <>
  If there is no response entity body <>, the cross-origin request status 
<http://www.w3.org/TR/cors/#cross-origin-request-status> is success, and the 
synchronous flag <> is set

Switch to the DONE state <>.


When something is said to be a network error run the request error <> steps 
for exception "NetworkError 
<http://dev.w3.org/2006/webapi/DOM4Core/#networkerror>" and event error <>.

When something is said to be an abort error run the request error <> steps for 
exception "AbortError <http://dev.w3.org/2006/webapi/DOM4Core/#aborterror>" and 
eventabort <>.

When something is said to be a timeout error run the request error <> steps 
for exception "TimeoutError 
<http://dev.w3.org/2006/webapi/DOM4Core/#timeouterror>" and event timeout <>.

When something is said to be a request error for exception exception and event 
event run these steps:

 * 
Terminate the request <>. 

 * 
Change the state to DONE <>.

 * 
If the synchronous flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an exception exception.

 * 
Fire an event <http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-fire> 
namedreadystatechange <>.

At this point it is clear that the synchronous flag <> is unset.

 * 
If the upload complete flag <> is unset, follow these substeps:

 * 
Set the upload complete flag <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <> on the XMLHttpRequestUpload <> object. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
event on the XMLHttpRequestUpload <> object. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadend <> on the XMLHttpRequestUpload <> object. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
event. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadend <>. 

When it is said to switch to the HEADERS_RECEIVED state run these steps:

 * 
Change the state to HEADERS_RECEIVED <>.

 * 
Fire an event <http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-fire> 
namedreadystatechange <>.

When it is said to switch to the LOADING state run these steps:

 * 
Change the state to LOADING <>.

 * 
Fire an event <http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-fire> 
namedreadystatechange <>.

When it is said to switch to the DONE state run these steps:

 * 
If the synchronous flag <> is set, update the response entity body <>.

 * 
Unset the synchronous flag <>. 

 * 
Change the state to DONE <>.

 * 
Fire an event <http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-fire> 
namedreadystatechange <>.

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named load
 <>.

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadend <>.

When it is said to make progress notifications, while the download is 
progressing,queue a task 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#queue-a-task> to 
fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <> about every 50ms or for every byte received, whichever is least 
frequent.

When it is said to make upload progress notifications run these steps:

 * 
While the request entity body is being transmitted and the upload complete flag
 <> is unset, queue a task 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#queue-a-task> to 
fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <> on the XMLHttpRequestUpload <> object about every 50ms or for every 
byte transmitted, whichever isleast frequent.

 * 
If the request entity body <> has been fully transmitted (irrespective of 
whether the server has started transmitting a response or the status code of 
such a response) and theupload complete flag <> is still unset, queue a task 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#queue-a-task> to 
run these substeps:

 * 
Set the upload complete flag <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <> on the XMLHttpRequestUpload <> object. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named load
 <> on the XMLHttpRequestUpload <> object. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadend <> on the XMLHttpRequestUpload <> object. 

4.6.8 The abort() method
  client . abort <>() 
Cancels any network activity. 

The abort() method must run these steps: 

 * 
Terminate the request <>. 

 * 
If the state is UNSENT <>, OPENED <> with the send() flag <> being unset, or 
DONE <> go to the next step.

Otherwise, run these substeps:

 * 
Change the state to DONE <>.

 * 
Unset the send() flag <>. 

 * 
Fire an event <http://dev.w3.org/2006/webapi/DOM4Core/#concept-event-fire> 
namedreadystatechange <>.

 * 
If the upload complete flag <> is false run these substeps:

 * 
Set the upload complete flag <> to true.

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <> on the XMLHttpRequestUpload <> object. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
abort <> on the XMLHttpRequestUpload <> object.

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadend <> on the XMLHttpRequestUpload <> object.

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
progress <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
abort <>. 

 * 
Fire a progress event 
<http://dev.w3.org/2006/webapi/progress/#concept-event-fire-progress> named 
loadend <>. 

 * 
Change the state to UNSENT <>.

No readystatechange <> event is dispatched.

4.7 Response

A response header is a HTTP response header transmitted before the response 
entity body <>. [HTTP] <> 

This excludes trailer fields ("trailers"). 

4.7.1 The status attribute
  client . status <> 

Returns the HTTP status code. 


The status attribute must return the result of running these steps:

 * 
If the state is UNSENT <> or OPENED <>, return 0. 

 * 
If the error flag <> is set, return 0.

 * 
Return the HTTP status code.

4.7.2 The statusText attribute
  client . statusText <> 

Returns the HTTP status text. 


The statusText attribute must return the result of running these steps: 

 * 
If the state is UNSENT <> or OPENED <>, return the empty string. 

 * 
If the error flag <> is set, return the empty string. 

 * 
Return the HTTP status text. 

4.7.3 The getResponseHeader() method
  client . getResponseHeader <>(header) 

Returns the header field value from the response of which the field name 
matchesheader, unless the field name is Set-Cookie or Set-Cookie2. 


The getResponseHeader(header) method must run these steps: 

 * 
If the state is UNSENT <> or OPENED <>, return null. 

 * 
If the error flag <> is set, return null. 

 * 
If header is a case-insensitive match for Set-Cookie or Set-Cookie2, return 
null.

 * 
If header is a case-insensitive match for multiple response headers <>, return 
the values of these headers as a single concatenated string separated from each 
other by a U+002C COMMA U+0020 SPACE character pair.

 * 
If header is a case-insensitive match for a single response header <>, return 
the value of that header.

 * 
Return null.

The Cross-Origin Resource Sharing specification filters response headers <> 
exposed bygetResponseHeader() <> for cross-origin requests 
<http://www.w3.org/TR/cors/#cross-origin-request>. [CORS] <> 

For the following script:
var client = new XMLHttpRequest(); client.open("GET", 
"unicorns-are-teh-awesome.txt", true); client.send(); client.onreadystatechange 
= function() { if(this.readyState == 2) { 
print(client.getResponseHeader("Content-Type")); } } 
The print() function will get to process something like:
text/plain; charset=UTF-8 
4.7.4 The getAllResponseHeaders() method
  client . getAllResponseHeaders <>() 

Returns all headers from the response, with the exception of those whose field 
name isSet-Cookie or Set-Cookie2. 


The getAllResponseHeaders() method must run these steps:

 * 
If the state is UNSENT <> or OPENED <>, return the empty string. 

 * 
If the error flag <> is set, return the empty string. 

 * 
Return all response headers <>, excluding headers that are a case-insensitive 
match forSet-Cookie or Set-Cookie2, as a single string, with each header line 
separated by a U+000D CR U+000A LF pair, excluding the status line, and with 
each header name and header value separated by a U+003A COLON U+0020 SPACE pair.

The Cross-Origin Resource Sharing specification filters response headers <> 
exposed bygetAllResponseHeaders() <> for cross-origin requests 
<http://www.w3.org/TR/cors/#cross-origin-request>. [CORS] <> 

For the following script:
var client = new XMLHttpRequest(); client.open("GET", "narwhals-too.txt", 
true); client.send(); client.onreadystatechange = function() { 
if(this.readyState == 2) { print(this.getAllResponseHeaders()); } } 
The print() function will get to process something like:
Date: Sun, 24 Oct 2004 04:58:38 GMT Server: Apache/1.3.31 (Unix) Keep-Alive: 
timeout=15, max=99 Connection: Keep-Alive Transfer-Encoding: chunked 
Content-Type: text/plain; charset=utf-8 
4.7.5 Response entity body

The response MIME type is the MIME type the Content-Type header contains 
excluding any parameters andconverted to ASCII lowercase 
<http://dev.w3.org/2006/webapi/DOM4Core/#converted-to-ascii-lowercase>, or null 
if the response header can not be parsed or was omitted. Theoverride MIME type 
is initially null and can get a value ifoverrideMimeType() <> is invoked. Final 
MIME type is the override MIME type <> unless that is null in which case it is 
theresponse MIME type <>. 

The response charset is the value of the charset parameter of the Content-Type 
header or null if there was nocharset parameter or the header could not be 
parsed or was omitted. Theoverride charset is initially null and can get a 
value ifoverrideMimeType() <> is invoked. Final charset is the override charset 
<> unless that is null in which case it is the response charset <>.

The response entity body is the fragment of the entity body 
<http://tools.ietf.org/html/rfc2616/#section-7.2> of the response received so 
far (LOADING <>) or the complete entity body 
<http://tools.ietf.org/html/rfc2616/#section-7.2> of the response (DONE <>). If 
the response does not have anentity body 
<http://tools.ietf.org/html/rfc2616/#section-7.2>, the response entity body <> 
is null.

The response entity body <> is updated as part of the send() <> method and 
reset by theopen() <> method.

The arraybuffer response entity body is either an ArrayBuffer 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFER> 
representing theresponse entity body <> or null. If the arraybuffer response 
entity body <> is null, let it be the return value of the following algorithm:

 * 
If the response entity body <> is null, return an empty ArrayBuffer 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFER> object.

 * 
Return an ArrayBuffer 
<http://www.khronos.org/registry/typedarray/specs/latest/#ARRAYBUFFER> object 
representing theresponse entity body <>.

The blob response entity body is either a Blob 
<http://dev.w3.org/2006/webapi/FileAPI/#blob> representing the response entity 
body <> or null. If the blob response entity body <> is null, set it to the 
return value of the following algorithm:

 * 
If the response entity body <> is null, return an empty Blob 
<http://dev.w3.org/2006/webapi/FileAPI/#blob> object.

 * 
Return a Blob <http://dev.w3.org/2006/webapi/FileAPI/#blob> object 
representing theresponse entity body <>. 

The document response entity body is either a document 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-document> representing the 
response entity body <> or null. If the document response entity body <> is 
null, set it to the return value of the following algorithm:

 * 
If the response entity body <> is null, return null.

 * 
If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is aworker environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#worker-environment>
, return null.

 * 
If final MIME type <> is not null, text/html, text/xml, application/xml, or 
does not end in+xml, return null. 

 * 
If responseType <> is the empty string and final MIME type <> is text/html, 
return null.

This is restricted to responseType <> being "document" in order to prevent 
breaking legacy content.

 * 
If final MIME type <> is text/html, run these substeps: 

 * 
Let charset be the final charset <>. 

 * 
If charset is null, prescan the first 1024 bytes of the response entity body <>
 and if that does not terminate unsuccessfully then letcharset be the return 
value.

 * 
If charset is null, set charset to utf-8 
<http://encoding.spec.whatwg.org/#utf-8>. 

 * 
Let document be a document 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-document> that represents the 
result parsingresponse entity body <> following the rules set forth in the HTML 
Standard for an HTML parser with scripting disabled anda known definite encoding
 
<http://www.w3.org/html/wg/drafts/html/master/syntax.html#a-known-definite-encoding>
charset. [HTML] <> 

 * 
Flag document as an HTML document 
<http://dev.w3.org/2006/webapi/DOM4Core/#html-document>. 

 * 
Otherwise, let document be a document 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-document> that represents the 
result of parsing theresponse entity body <> following the rules set forth in 
the XML specifications. If that fails (unsupported character encoding, 
namespace well-formedness error, etc.), return null.[XML] <> [XMLNS] <> 

Scripts in the resulting document tree will not be executed, resources 
referenced will not be loaded and no associated XSLT will be applied.

 * 
If charset is null, set charset to utf-8 
<http://encoding.spec.whatwg.org/#utf-8>. 

 * 
Set document's encoding 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-document-encoding> to charset. 

 * 
Set document's content type 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-document-content-type> to 
final MIME type <>. 

 * 
Set document's URL 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-document-url> to request URL <>
.

 * 
Set document's origin 
<http://www.w3.org/html/wg/drafts/html/master/browsers.html#origin> to source 
origin <>. 

 * 
Return document. 

The JSON response entity body is either a JavaScript value representing the 
response entity body <>. If the JSON response entity body <> is null, set it to 
the return value of the following algorithm:

 * 
Let JSON text be the result of running utf-8 decode 
<http://encoding.spec.whatwg.org/#utf-8-decode> on byte stream response entity 
body <>. 

 * 
Return the result of invoking the initial value of the parse property of the 
JSON object defined in JavaScript, with JSON text as its only argument, or null 
if that function throws an exception.[ECMASCRIPT] <> 

The text response entity body is either a string representing the response 
entity body <> or null. If the text response entity body <> is null, set it to 
the return value of the following algorithm:

 * 
If the response entity body <> is null, return the empty string.

 * 
Let charset be the final charset <>. 

 * 
If responseType <> is the empty string, charset is null, and final MIME type <>
 is either null,text/xml, application/xml or ends in +xml, use the rules set 
forth in the XML specifications to determine the encoding. Letcharset be the 
determined encoding.[XML] <> [XMLNS] <> 

This is restricted to responseType <> being the empty string to keep the 
non-legacyresponseType <> value "text" simple. 

 * 
If charset is null, set charset to utf-8 
<http://encoding.spec.whatwg.org/#utf-8>. 

 * 
Return the result of running decode <http://encoding.spec.whatwg.org/#decode> 
on byte streamresponse entity body <> using fallback encoding charset. 

Authors are strongly encouraged to always encode their resources using utf-8 
<http://encoding.spec.whatwg.org/#utf-8>. 

4.7.6 The overrideMimeType() method
  client . overrideMimeType <>(mime) 

Sets the Content-Type header for the response to mime.

Throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if the 
state isLOADING <> or DONE <>. 

Throws a JavaScript TypeError 
<http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception> if mime is not 
a valid media type.


The overrideMimeType(mime) method must run these steps: 

 * 
If the state is LOADING <> or DONE <>, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If parsing mime analogously to the value of the Content-Type header fails, 
throw <http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> a JavaScript 
TypeError <http://dev.w3.org/2006/webapi/WebIDL/#dfn-predefined-exception>. 

 * 
If mime is successfully parsed, set override MIME type <> to its MIME type, 
excluding any parameters, andconverted to ASCII lowercase 
<http://dev.w3.org/2006/webapi/DOM4Core/#converted-to-ascii-lowercase>. 

 * 
If a charset parameter is successfully parsed, set override charset <> to its 
value.

4.7.7 The responseType attribute
  client . responseType <> [ = value ] 

Returns the response type.

Can be set to change the response type. Values are: the empty string 
(default), "arraybuffer", "blob", "document", "json", and "text".

When set: setting to "document" is ignored if the JavaScript global environment
 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is aworker environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#worker-environment>

When set: throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if the 
state isLOADING <> or DONE <>. 

When set: throws an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception if the 
synchronous flag <> is set and the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
.


The responseType attribute must return its value. Initially its value must be 
the empty string.

Setting the responseType <> attribute must run these steps: 

 * 
If the state is LOADING <> or DONE <>, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is adocument environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#document-environment>
 and thesynchronous flag <> is set, throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidAccessError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidaccesserror>" exception. 

 * 
If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is aworker environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#worker-environment>
 and the given value is "document", terminate these steps. 

 * 
Set the responseType <> attribute's value to the given value.

4.7.8 The response attribute
  client . response <> 

Returns the response entity body <>. 


The response attribute must return the result of running these steps:
  If responseType <> is the empty string or "text"

 * 
If the state is not LOADING <> or DONE <>, return the empty string.

 * 
If the error flag <> is set, return the empty string.

 * 
Return the text response entity body <>.

  Otherwise

 * 
If the state is not DONE <>, return null.

 * 
If the error flag <> is set, return null.

 *   If responseType <> is "arraybuffer"

Return the arraybuffer response entity body <>.

  If responseType <> is "blob"

Return the blob response entity body <>.

  If responseType <> is "document"

Return the document response entity body <>.

  If responseType <> is "json"

Return the JSON response entity body <>.



4.7.9 The responseText attribute
  client . responseText <> 

Returns the text response entity body <>. 

Throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if 
responseType <> is not the empty string or "text". 


The responseText attribute must return the result of running these steps:

 * 
If responseType <> is not the empty string or "text", throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception. 

 * 
If the state is not LOADING <> or DONE <>, return the empty string.

 * 
If the error flag <> is set, return the empty string.

 * 
Return the text response entity body <>.

4.7.10 The responseXML attribute
  client . responseXML <> 

Returns the document response entity body <>.

Throws an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception if 
responseType <> is not the empty string or "document". 


The responseXML attribute must return the result of running these steps:

 * 
If responseType <> is not the empty string or "document", throw 
<http://dev.w3.org/2006/webapi/DOM4Core/#concept-throw> an "InvalidStateError 
<http://dev.w3.org/2006/webapi/DOM4Core/#invalidstateerror>" exception.

 * 
If the state is not DONE <>, return null. 

 * 
If the error flag <> is set, return null. 

 * 
Return the document response entity body <>.

The responseXML <> attribute has XML in its name for historical reasons. It 
also returns HTML resources as documents.

4.8 Events summary

This section is non-normative.

The following events are dispatched on XMLHttpRequest <> and/or 
XMLHttpRequestUpload <> objects:

Event name Interface Dispatched when… 
readystatechange Event <http://dev.w3.org/2006/webapi/DOM4Core/#event> The 
readyState <> attribute changes value, except when it changes to UNSENT <>. 
loadstart ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent>
The request starts. 
progress ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent> 
Transmitting data. 
abort ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent> 
The request has been aborted. For instance, by invoking theabort() <> method. 
error ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent> 
The request has failed. 
load ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent> The 
request has successfully completed. 
timeout ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent> 
The author specified timeout has passed before the request completed. 
loadend ProgressEvent <http://dev.w3.org/2006/webapi/progress/#progressevent> 
The request has completed (either in success or failure). 
5 Interface FormData
[Constructor <>(optional HTMLFormElement 
<http://www.w3.org/html/wg/drafts/html/master/forms.html#htmlformelement> form
)] interfaceFormData { void append <>([EnsureUTF16] DOMString name, Blob 
<http://dev.w3.org/2006/webapi/FileAPI/#blob> value, optional [EnsureUTF16] 
DOMStringfilename); void append <>([EnsureUTF16] DOMString name, [EnsureUTF16] 
DOMStringvalue); }; 
If the JavaScript global environment 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#javascript-global-environment>
 is aworker environment 
<http://www.w3.org/html/wg/drafts/html/master/webappapis.html#worker-environment>
,FormData <> must be exposed to JavaScript 
<http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#exposed-to-javascript>
 as if the constructor part of the IDL reads[Constructor] (i.e. has no 
arguments). 

The FormData <> object represents an ordered list of entries. Each entry <> 
consists of aname and a value. 

For the purposes of interaction with other algorithms, an entry <>'s type is 
"string" ifvalue <> is a string and "file" otherwise. If an entry <>'s type is 
"file", its filename is the value ofentry <>'s value <>'s name 
<http://dev.w3.org/2006/webapi/FileAPI/#dfn-name> attribute. 
  fd = new FormData <>([form]) 

Returns a new FormData <> object, optionally initialized with the entries <> 
fromform (if given). 

  fd . append <>(name, value [, filename]) 

Appends a new entry <> to the FormData <> object. 


The FormData(form) constructor must run these steps: 

 * 
Let fd be a new FormData <> object. 

 * 
If form is given, set fd's entries <> to the result of constructing the form 
data set 
<http://www.w3.org/html/wg/drafts/html/master/forms.html#constructing-the-form-data-set>
 forform. 

 * 
Return fd. 

The append(name, value, filename) method must run these steps: 

 * 
Let entry be a new entry <>. 

 * 
Set entry's name <> to name. 

 * 
If value is a Blob <http://dev.w3.org/2006/webapi/FileAPI/#blob>, set value to 
a newFile <http://dev.w3.org/2006/webapi/FileAPI/#file> object whose name 
<http://dev.w3.org/2006/webapi/FileAPI/#dfn-name> attribute value is "blob". 

 * 
If value is a File <http://dev.w3.org/2006/webapi/FileAPI/#file> and filename 
is given, setvalue's name <http://dev.w3.org/2006/webapi/FileAPI/#dfn-name> 
attribute value tofilename. 

 * 
Set entry's value <> to value. 

 * 
Append entry to FormData <> object's list of entries <>. 

References
  [COOKIES] 
HTTP State Management Mechanism <http://tools.ietf.org/html/rfc6265>, Adam 
Barth. IETF.
  [CORS] 
Cross-Origin Resource Sharing <http://www.w3.org/TR/cors/>, Anne van Kesteren. 
W3C.
  [DOM] 
DOM <http://www.w3.org/TR/dom/>, Anne van Kesteren, Aryeh Gregor, Ms2ger et 
al.. W3C.
  [DOMPS] 
DOM Parsing and Serialization <http://www.w3.org/TR/DOM-Parsing/>, Travis 
Leithead and Ms2ger. W3C.
  [ECMASCRIPT] 
ECMAScript Language Specification 
<http://www.ecma-international.org/publications/standards/Ecma-262.htm>. ECMA. 
  [ENCODING] 
Encoding Standard <http://encoding.spec.whatwg.org/>, Anne van Kesteren. 
WHATWG.
  [FILEAPI] 
File API <http://www.w3.org/TR/FileAPI/>, Arun Ranganathan and Jonas Sicking. 
W3C.
  [HTML] 
HTML <http://www.w3.org/TR/html5/>, Robin Berjon, Travis Leithead, Erika Doyle 
Navara et al.. W3C.
  [HTTP] 
Hypertext Transfer Protocol -- HTTP/1.1 <http://tools.ietf.org/html/rfc2616>, 
Roy Fielding, James Gettys, Jeffrey Mogul et al.. IETF.
  [HTTPAUTH] 
HTTP Authentication: Basic and Digest Access Authentication 
<http://tools.ietf.org/html/rfc2617>, J. Franks, Phillip Hallam-Baker, J. 
Hostetler et al.. IETF.
  [HTTPVERBSEC] 
Multiple vendors' web servers enable HTTP TRACE method by default 
<http://www.kb.cert.org/vuls/id/867593>. US-CERT. 
Microsoft Internet Information Server (IIS) vulnerable to cross-site scripting 
via HTTP TRACK method <http://www.kb.cert.org/vuls/id/288308>. US-CERT. 
HTTP proxy default configurations allow arbitrary TCP connections 
<http://www.kb.cert.org/vuls/id/150227>. US-CERT. 
  [PROGRESSEVENTS] 
Progress Events <http://www.w3.org/TR/progress-events/>, Anne van Kesteren, 
Charles McCathieNevile and Jungkee Song. W3C.
  [RFC2119] 
Key words for use in RFCs to Indicate Requirement Levels 
<http://tools.ietf.org/html/rfc2119>, Scott Bradner. IETF. 
  [TYPEDARRAY] 
Typed Array <http://www.khronos.org/registry/typedarray/specs/latest/>, David 
Herman and Kenneth Russell. Khronos.
  [URL] 
URL Standard <http://url.spec.whatwg.org/>, Anne van Kesteren. WHATWG. 
  [WEBIDL] 
Web IDL <http://dev.w3.org/2006/webapi/WebIDL/>, Cameron McCormack. W3C. 
  [XML] 
Extensible Markup Language <http://www.w3.org/TR/xml/>, Tim Bray, Jean Paoli, 
C. M. Sperberg-McQueen et al.. W3C.
  [XMLNS] 
Namespaces in XML <http://www.w3.org/TR/xml-names/>, Tim Bray, Dave Hollander, 
Andrew Layman et al.. W3C.

Acknowledgments

The editor would like to thank Addison Phillips, Adrian Bateman, Ahmed Kamel, 
Alex Hopmann, Alex Vincent, Alexey Proskuryakov, Andrea Marchesini, Asbjørn 
Ulsberg, Boris Zbarsky, Björn Höhrmann, Cameron McCormack, Chris Marrin, 
Christophe Jolif, Charles McCathieNevile, Dan Winship, David Andersson, David 
Flanagan, David Håsäther, David Levin, Dean Jackson, Denis Sureau, Dominik 
Röttsches, Doug Schepers, Douglas Livingstone, Elliott Sprehn, Elliotte Harold, 
Eric Lawrence, Eric Uhrhane, Erik Arvidsson Erik Dahlström, Feras Moussa, 
Geoffrey Sneddon, Gideon Cohn, Glenn Adams, Gorm Haug Eriksen, Håkon Wium Lie, 
Hallvord R. M. Steen, Henri Sivonen, Huub Schaeks, Ian Davis, Ian Hickson, Ivan 
Herman, Jarred Nicholls, Jeff Walden, Jens Lindström, Jim Deegan, Jim Ley, Joe 
Farro, Jonas Sicking, Julian Reschke, 송정기 (Jungkee Song), 呂康豪 (Kang-Hao Lu), 
Karl Dubost, Lachlan Hunt, Maciej Stachowiak, Magnus Kristiansen, Marc Hadley, 
Marcos Caceres, Mark Baker, Mark Birbeck, Mark Nottingham, Mark S. Miller, 
Martin Hassman, Mohamed Zergaoui, Ms2ger, Odin Hørthe Omdal, Olli Pettay, Pawel 
Glowacki, Peter Michaux, Philip Taylor, Robin Berjon, Rune F. Halvorsen, Ruud 
Steltenpool, Sergiu Dumitriu, Sigbjørn Finne, Simon Pieters, Stewart Brodie, 
Sunava Dutta, Takeshi Yoshino, Thomas Roessler, Tom Magliery, Travis Leithead 
Yehuda Katz, and Zhenbin Xu for their contributions to this specification.

Special thanks to the Microsoft employees who first implemented the 
XMLHttpRequest interface, which was first widely deployed by the Windows 
Internet Explorer browser.

Special thanks also to the WHATWG for drafting an initial version of this 
specification in their Web Applications 1.0 document (now renamed to HTML).
[HTML] <>

Special thanks to Anne van Kesteren who has provided nearly all the contents 
until he stepped down as a W3C editor and is now in succession providing 
discussions and contents as the editor of the XMLHttpRequest Living Standard in 
WHATWG which this version of the specification pursues convergence.

Thanks also to all those who have helped to improve this specification by 
sending suggestions and corrections. (Please, keep bugging us with your issues!)
